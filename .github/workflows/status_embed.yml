name: Status Embed

on:
  workflow_call:
    secrets:
      webhook_token:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  status_embed:
    # We need to send a status embed whenever the workflow
    # sequence we're running terminates. There are a number
    # of situations in which that happens:
    #
    # 1. We reach the end of the Deploy workflow, without
    #    it being skipped.
    #
    # 2. A `pull_request` triggered a Lint & Test workflow,
    #    as the sequence always terminates with one run.
    #
    # 3. If any workflow ends in failure or was cancelled.
    if: github.event_name == 'pull_request'
    #if: >-
    #  (env.trigger_workflow_name == 'Deploy' && github.event.workflow_run.conclusion != 'skipped') ||
    #  env.trigger_event_name == 'pull_request' ||
    #  github.event.workflow_run.conclusion == 'failure' ||
    #   github.event.workflow_run.conclusion == 'cancelled'
    name:  Send Status Embed to Discord
    runs-on: ubuntu-latest

    steps:
      # A workflow_run event does not contain all the information
      # we need for a PR embed. That's why we upload an artifact
      # with that information in the Lint workflow.

      # Send an informational status embed to Discord instead of the
      # standard embeds that Discord sends. This embed will contain
      # more information and we can fine tune when we actually want
      # to send an embed.
      - name: First step
        run: echo ${{ steps.step1.outcome }}
      - name: GitHub Actions Status Embed for Discord
        uses: SebastiaanZ/github-status-embed-for-discord@v0.2.1
        with:
          # Our GitHub Actions webhook
          webhook_id: '1073334907755053056'
          webhook_token: ${{ secrets.webhook_token }}

          # Workflow information
          workflow_name: ${{ github.workflow }}
          run_id: ${{ github.run_id }}
          run_number: ${{ github.run_number }}
          status: ${{ inputs.job_status }}
          actor: ${{ github.actor }}
          repository:  ${{ github.repository }}
          ref: ${{ github.ref }}
          sha: ${{ github.sha }}

          pr_author_login: ${{ github.event.pull_request.user.login}}
          pr_number: ${{ github.event.pull_request.number }}
          pr_title: ${{ github.event.pull_request.title }}
          pr_source: ${{ github.event.pull_request.head.label }}